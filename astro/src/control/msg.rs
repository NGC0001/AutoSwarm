use std::option::Option;

use serde::{Deserialize, Serialize};

use super::Position;

// the node id of a uav in a tree structure.
// it is: id(top) -> id -> ... -> id(this)
pub type Nid = Vec<u32>;

// description of a node in the tree structure.
// need to be generated by that node, passed to its parent and children.
#[derive(Deserialize, Serialize, Debug)]
pub struct NodeDesc {
    pub nid: Nid,
    pub p: Position,
    pub subswarm_size: u32,  // up-flowing data
    pub swarm_size: u32,  // down-flowing data
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Msg {
    pub from_nid: Nid,  // structural id of message sender
    pub from_p: Position,  // position of message sender
    pub to_ids: Vec<u32>,  // target message receivers, None means broadcasting

    pub node_desc: Option<NodeDesc>,
}

impl Msg {
    pub fn new(nid: &Nid, p: &Position) -> Msg {
        Msg {
            from_nid: nid.clone(),
            from_p: *p,
            to_ids: vec![],

            node_desc: None,
        }
    }
}