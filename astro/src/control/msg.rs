use std::option::Option;

use serde::{Deserialize, Serialize};

use super::{Position, Velocity};

// the node id of a uav in a tree structure.
// it is: id(top) -> id -> ... -> id(this)
pub type Nid = Vec<u32>;

#[inline]
pub fn nid2id(nid: &Nid) -> u32 {
    *nid.last().unwrap()
}

pub fn parent_id_from_nid(nid: &Nid) -> Option<u32> {
    let len = nid.len();
    match len {
        ..=1 => None,
        _ => Some(nid[len - 2]),
    }
}

// description of a node in the tree structure.
// need to be generated by that node, passed to its parent and children.
#[derive(Deserialize, Serialize, Debug)]
#[derive(Clone)]
pub struct NodeDesc {
    pub nid: Nid,  // structural id of node, down-flowing data
    pub p: Position,
    pub v: Velocity,
    pub subswarm_size: u32,  // up-flowing data
    pub swarm_size: u32,  // down-flowing data
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Msg {
    pub sender: NodeDesc,  // node description of message sender
    pub to_ids: Vec<u32>,  // target message receivers, None means broadcasting
}

impl Msg {
    pub fn new(sender: NodeDesc) -> Msg {
        Msg {
            sender,
            to_ids: vec![],
        }
    }
}